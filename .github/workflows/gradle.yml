# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Spring Boot & Gradle CI/CD 
 
on:
  push:
    branches: [ "deploy" ]
  pull_request:
    branches: [ "deploy" ]

permissions:
  contents: read

jobs:
  
  
  
  build:
    runs-on: ubuntu-latest
    env:
     working-directory: "./Backend/triplet"
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      working-directory: ${{ env.working-directory }}
      
      #Build
    - name: Build with Gradle
      run : ./gradlew clean build --exclude-task test
      working-directory: ${{ env.working-directory }}
      
    - name: Rename jar for deploy
      run: mv build/libs/triplet-0.0.1-SNAPSHOT.jar build/libs/app.jar

    - name: ENV 환경변수 생성
      run:
        touch .env;
        echo "MYSQL_PASSWORD=${{secrets.MYSQL_PASSWORD}}" > .env;
        echo "MYSQL_USERNAME=${{secrets.MYSQL_USERNAME}}" >> .env;
        echo "EC2_HOST=${{secrets.EC2_HOST}}"  >> .env;
        echo "S3_ACCESS_KEY=${{secrets.S3_ACCESS_KEY}}; >> .env;
        echo "S3_SECRET_KEY=${{secrets.S3_SECRET_KEY}}; >> .env;
        echo "S3_BUCKET=${{secrets.S3_BUCKET}}; >> .env;
        cat .env;
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }} 
    
    - name: Check contents of build/libs
      run: ls -la build/libs/
    
    - name: docker file Build and push
      uses: docker/build-push-action@v3
      with:
          context: .
          push: true
          tags: ojin/triplet-server:latest
          
          
    
            
            
      #appleboy 사용해 ssh접속
    - name: make Dir
      uses: appleboy/ssh-action@master
      with:
        host: ${{secrets.REMOTE_IP}}
        username: ${{secrets.REMOTE_USERNAME}}
        key:  ${{secrets.SSH_KEY}}
        port:  ${{secrets.REMOTE_SSH_PORT}}
        script: |
          mkdir -p app
          whoami
    
    - name: Upload Jar to Ec2
      uses: appleboy/scp-action@master
      with:
        host: ${{secrets.REMOTE_IP}}
        username: ${{secrets.REMOTE_USERNAME}}
        key:  ${{secrets.SSH_KEY}}
        port:  ${{secrets.REMOTE_SSH_PORT}}
        source: ".env"
        target: "home/ubuntu/app"
        
        
    - name: Docker 이미지 pull 이후 jar실행
      uses: appleboy/ssh-action@master
      with:
          host: ${{secrets.EC2_HOST}}
          username: ${{secrets.EC2_USERNAME}}
          key:  ${{secrets.EC2_SSH_KEY}}
          port:  ${{secrets.EC2_SSH_PORT}}
          script: |
            cd app
            sudo docker stop triplet-container || true && sudo docker rm triplet-container || true
            sudo docker rmi ojin/triplet-server:latest || true
            sudo docker pull ojin/triplet-server:latest
            sudo docker run -d --name triplet-container -p 8080:10134 --env-file .env ojin/triplet-server
            sudo docker ps -a
